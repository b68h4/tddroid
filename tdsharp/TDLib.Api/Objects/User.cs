using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Represents a user 
        /// </summary>
        public class User : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "user";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// User identifier 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("id")]
            public int Id { get; set; }

            /// <summary>
            /// First name of the user 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("first_name")]
            public string FirstName { get; set; }

            /// <summary>
            /// Last name of the user 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("last_name")]
            public string LastName { get; set; }

            /// <summary>
            /// Username of the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("username")]
            public string Username { get; set; }

            /// <summary>
            /// Phone number of the user 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("phone_number")]
            public string PhoneNumber { get; set; }

            /// <summary>
            /// Current online status of the user 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("status")]
            public UserStatus Status { get; set; }

            /// <summary>
            /// Profile photo of the user; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("profile_photo")]
            public ProfilePhoto ProfilePhoto { get; set; }

            /// <summary>
            /// The user is a contact of the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_contact")]
            public bool IsContact { get; set; }

            /// <summary>
            /// The user is a contact of the current user and the current user is a contact of the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_mutual_contact")]
            public bool IsMutualContact { get; set; }

            /// <summary>
            /// True, if the user is verified 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_verified")]
            public bool IsVerified { get; set; }

            /// <summary>
            /// True, if the user is Telegram support account
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_support")]
            public bool IsSupport { get; set; }

            /// <summary>
            /// If non-empty, it contains a human-readable description of the reason why access to this user must be restricted
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("restriction_reason")]
            public string RestrictionReason { get; set; }

            /// <summary>
            /// True, if many users reported this user as a scam
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_scam")]
            public bool IsScam { get; set; }

            /// <summary>
            /// If false, the user is inaccessible, and the only information known about the user is inside this class. It can't be passed to any method except GetUser 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("have_access")]
            public bool HaveAccess { get; set; }

            /// <summary>
            /// Type of the user 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("type")]
            public UserType Type { get; set; }

            /// <summary>
            /// IETF language tag of the user's language; only available to bots
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("language_code")]
            public string LanguageCode { get; set; }
        }
    }
}