using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// A chat. (Can be a private chat, basic group, supergroup, or secret chat)
        /// </summary>
        public class Chat : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "chat";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Chat unique identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("id")]
            public long Id { get; set; }

            /// <summary>
            /// Type of the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("type")]
            public ChatType Type { get; set; }

            /// <summary>
            /// A chat list to which the chat belongs; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_list")]
            public ChatList ChatList { get; set; }

            /// <summary>
            /// Chat title
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("title")]
            public string Title { get; set; }

            /// <summary>
            /// Chat photo; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("photo")]
            public ChatPhoto Photo { get; set; }

            /// <summary>
            /// Actions that non-administrator chat members are allowed to take in the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("permissions")]
            public ChatPermissions Permissions { get; set; }

            /// <summary>
            /// Last message in the chat; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("last_message")]
            public Message LastMessage { get; set; }

            /// <summary>
            /// Descending parameter by which chats are sorted in the main chat list. If the order number of two chats is the same, they must be sorted in descending order by ID. If 0, the position of the chat in the list is undetermined
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("order")]
            public Int64 Order { get; set; }

            /// <summary>
            /// True, if the chat is pinned
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_pinned")]
            public bool IsPinned { get; set; }

            /// <summary>
            /// True, if the chat is marked as unread
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_marked_as_unread")]
            public bool IsMarkedAsUnread { get; set; }

            /// <summary>
            /// True, if the chat is sponsored by the user's MTProxy server
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_sponsored")]
            public bool IsSponsored { get; set; }

            /// <summary>
            /// True, if the chat has scheduled messages
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_scheduled_messages")]
            public bool HasScheduledMessages { get; set; }

            /// <summary>
            /// True, if the chat messages can be deleted only for the current user while other users will continue to see the messages
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_deleted_only_for_self")]
            public bool CanBeDeletedOnlyForSelf { get; set; }

            /// <summary>
            /// True, if the chat messages can be deleted for all users
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_deleted_for_all_users")]
            public bool CanBeDeletedForAllUsers { get; set; }

            /// <summary>
            /// True, if the chat can be reported to Telegram moderators through reportChat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_reported")]
            public bool CanBeReported { get; set; }

            /// <summary>
            /// Default value of the disable_notification parameter, used when a message is sent to the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("default_disable_notification")]
            public bool DefaultDisableNotification { get; set; }

            /// <summary>
            /// Number of unread messages in the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("unread_count")]
            public int UnreadCount { get; set; }

            /// <summary>
            /// Identifier of the last read incoming message
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("last_read_inbox_message_id")]
            public long LastReadInboxMessageId { get; set; }

            /// <summary>
            /// Identifier of the last read outgoing message
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("last_read_outbox_message_id")]
            public long LastReadOutboxMessageId { get; set; }

            /// <summary>
            /// Number of unread messages with a mention/reply in the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("unread_mention_count")]
            public int UnreadMentionCount { get; set; }

            /// <summary>
            /// Notification settings for this chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("notification_settings")]
            public ChatNotificationSettings NotificationSettings { get; set; }

            /// <summary>
            /// Describes actions which should be possible to do through a chat action bar; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("action_bar")]
            public ChatActionBar ActionBar { get; set; }

            /// <summary>
            /// Identifier of the pinned message in the chat; 0 if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("pinned_message_id")]
            public long PinnedMessageId { get; set; }

            /// <summary>
            /// Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reply_markup_message_id")]
            public long ReplyMarkupMessageId { get; set; }

            /// <summary>
            /// A draft of a message in the chat; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("draft_message")]
            public DraftMessage DraftMessage { get; set; }

            /// <summary>
            /// Contains client-specific data associated with the chat. (For example, the chat position or local chat notification settings can be stored here.) Persistent if the message database is used
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("client_data")]
            public string ClientData { get; set; }
        }
    }
}