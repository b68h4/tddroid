using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Contains information about a language pack 
        /// </summary>
        public class LanguagePackInfo : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "languagePackInfo";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Unique language pack identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("id")]
            public string Id { get; set; }

            /// <summary>
            /// Identifier of a base language pack; may be empty. If a string is missed in the language pack, then it should be fetched from base language pack. Unsupported in custom language packs
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("base_language_pack_id")]
            public string BaseLanguagePackId { get; set; }

            /// <summary>
            /// Language name 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("name")]
            public string Name { get; set; }

            /// <summary>
            /// Name of the language in that language
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("native_name")]
            public string NativeName { get; set; }

            /// <summary>
            /// A language code to be used to apply plural forms. See https://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html for more info
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("plural_code")]
            public string PluralCode { get; set; }

            /// <summary>
            /// True, if the language pack is official 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_official")]
            public bool IsOfficial { get; set; }

            /// <summary>
            /// True, if the language pack strings are RTL 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_rtl")]
            public bool IsRtl { get; set; }

            /// <summary>
            /// True, if the language pack is a beta language pack
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_beta")]
            public bool IsBeta { get; set; }

            /// <summary>
            /// True, if the language pack is installed by the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_installed")]
            public bool IsInstalled { get; set; }

            /// <summary>
            /// Total number of non-deleted strings from the language pack 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("total_string_count")]
            public int TotalStringCount { get; set; }

            /// <summary>
            /// Total number of translated strings from the language pack
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("translated_string_count")]
            public int TranslatedStringCount { get; set; }

            /// <summary>
            /// Total number of non-deleted strings from the language pack available locally 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("local_string_count")]
            public int LocalStringCount { get; set; }

            /// <summary>
            /// Link to language translation interface; empty for custom local language packs
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("translation_url")]
            public string TranslationUrl { get; set; }
        }
    }
}