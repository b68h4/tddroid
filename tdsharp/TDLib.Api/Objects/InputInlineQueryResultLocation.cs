using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Represents a point on the map 
        /// </summary>
        public partial class InputInlineQueryResult : Object
        {
            /// <summary>
            /// Represents a point on the map 
            /// </summary>
            public class InputInlineQueryResultLocation : InputInlineQueryResult
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "inputInlineQueryResultLocation";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Unique identifier of the query result 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("id")]
                public string Id { get; set; }

                /// <summary>
                /// Location result 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("location")]
                public Location Location { get; set; }

                /// <summary>
                /// Amount of time relative to the message sent time until the location can be updated, in seconds 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("live_period")]
                public int LivePeriod { get; set; }

                /// <summary>
                /// Title of the result 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("title")]
                public string Title { get; set; }

                /// <summary>
                /// URL of the result thumbnail, if it exists 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("thumbnail_url")]
                public string ThumbnailUrl { get; set; }

                /// <summary>
                /// Thumbnail width, if known 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("thumbnail_width")]
                public int ThumbnailWidth { get; set; }

                /// <summary>
                /// Thumbnail height, if known
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("thumbnail_height")]
                public int ThumbnailHeight { get; set; }

                /// <summary>
                /// The message reply markup. Must be of type replyMarkupInlineKeyboard or null
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("reply_markup")]
                public ReplyMarkup ReplyMarkup { get; set; }

                /// <summary>
                /// The content of the message to be sent. Must be one of the following types: InputMessageText, InputMessageLocation, InputMessageVenue or InputMessageContact
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("input_message_content")]
                public InputMessageContent InputMessageContent { get; set; }
            }
        }
    }
}