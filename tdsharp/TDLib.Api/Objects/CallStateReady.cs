using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// The call is ready to use 
        /// </summary>
        public partial class CallState : Object
        {
            /// <summary>
            /// The call is ready to use 
            /// </summary>
            public class CallStateReady : CallState
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "callStateReady";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Call protocols supported by the peer 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("protocol")]
                public CallProtocol Protocol { get; set; }

                /// <summary>
                /// Available UDP reflectors 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("connections")]
                public CallConnection[] Connections { get; set; }

                /// <summary>
                /// A JSON-encoded call config 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("config")]
                public string Config { get; set; }

                /// <summary>
                /// Call encryption key 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("encryption_key")]
                public byte[] EncryptionKey { get; set; }

                /// <summary>
                /// Encryption key emojis fingerprint 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("emojis")]
                public string[] Emojis { get; set; }

                /// <summary>
                /// 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("allow_p2p")]
                public bool AllowP2p { get; set; }
            }
        }
    }
}