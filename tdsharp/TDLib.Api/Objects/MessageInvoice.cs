using System;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// A message with an invoice from a bot 
        /// </summary>
        public partial class MessageContent : Object
        {
            /// <summary>
            /// A message with an invoice from a bot 
            /// </summary>
            public class MessageInvoice : MessageContent
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "messageInvoice";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Product title 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("title")]
                public string Title { get; set; }

                /// <summary>
                /// A message with an invoice from a bot 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("description")]
                public string Description { get; set; }

                /// <summary>
                /// Product photo; may be null 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("photo")]
                public Photo Photo { get; set; }

                /// <summary>
                /// Currency for the product price 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("currency")]
                public string Currency { get; set; }

                /// <summary>
                /// Product total price in the minimal quantity of the currency
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("total_amount")]
                public long TotalAmount { get; set; }

                /// <summary>
                /// Unique invoice bot start_parameter. To share an invoice use the URL https://t.me/{bot_username}?start={start_parameter} 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("start_parameter")]
                public string StartParameter { get; set; }

                /// <summary>
                /// True, if the invoice is a test invoice
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("is_test")]
                public bool IsTest { get; set; }

                /// <summary>
                /// True, if the shipping address should be specified 
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("need_shipping_address")]
                public bool NeedShippingAddress { get; set; }

                /// <summary>
                /// The identifier of the message with the receipt, after the product has been purchased
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("receipt_message_id")]
                public long ReceiptMessageId { get; set; }
            }
        }
    }
}