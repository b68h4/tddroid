using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns storage usage statistics. Can be called before authorization 
        /// </summary>
        public class GetStorageStatistics : Function<StorageStatistics>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getStorageStatistics";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The maximum number of chats with the largest storage usage for which separate statistics should be returned. All other chats will be grouped in entries with chat_id == 0. If the chat info database is not used, the chat_limit is ignored and is always set to 0
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_limit")]
            public int ChatLimit { get; set; }
        }


        /// <summary>
        /// Returns storage usage statistics. Can be called before authorization 
        /// </summary>
        public static Task<StorageStatistics> GetStorageStatisticsAsync(this Client client,
            int chatLimit = default(int))
        {
            return client.ExecuteAsync(new GetStorageStatistics
            {
                ChatLimit = chatLimit,
            });
        }
    }
}