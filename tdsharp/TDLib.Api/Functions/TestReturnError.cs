using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns the specified error and ensures that the Error object is used; for testing only. This is an offline method. Can be called before authorization. Can be called synchronously 
        /// </summary>
        public class TestReturnError : Function<Error>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "testReturnError";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The error to be returned
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("error")]
            public Error Error { get; set; }
        }


        /// <summary>
        /// Returns the specified error and ensures that the Error object is used; for testing only. This is an offline method. Can be called before authorization. Can be called synchronously 
        /// </summary>
        public static Task<Error> TestReturnErrorAsync(this Client client,
            Error error = default(Error))
        {
            return client.ExecuteAsync(new TestReturnError
            {
                Error = error,
            });
        }
    }
}