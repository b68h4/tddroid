using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns list of chats with non-default notification settings 
        /// </summary>
        public class GetChatNotificationSettingsExceptions : Function<Chats>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getChatNotificationSettingsExceptions";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// If specified, only chats from the specified scope will be returned 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("scope")]
            public NotificationSettingsScope Scope { get; set; }

            /// <summary>
            /// If true, also chats with non-default sound will be returned
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("compare_sound")]
            public bool CompareSound { get; set; }
        }


        /// <summary>
        /// Returns list of chats with non-default notification settings 
        /// </summary>
        public static Task<Chats> GetChatNotificationSettingsExceptionsAsync(this Client client,
            NotificationSettingsScope scope = default(NotificationSettingsScope),
            bool compareSound = default(bool))
        {
            return client.ExecuteAsync(new GetChatNotificationSettingsExceptions
            {
                Scope = scope,
                CompareSound = compareSound,
            });
        }
    }
}