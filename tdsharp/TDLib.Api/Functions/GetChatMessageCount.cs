using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns approximate number of messages of the specified type in the chat 
        /// </summary>
        public class GetChatMessageCount : Function<Count>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getChatMessageCount";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the chat in which to count messages 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Filter for message content; searchMessagesFilterEmpty is unsupported in this function 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("filter")]
            public SearchMessagesFilter Filter { get; set; }

            /// <summary>
            /// If true, returns count that is available locally without sending network requests, returning -1 if the number of messages is unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("return_local")]
            public bool ReturnLocal { get; set; }
        }


        /// <summary>
        /// Returns approximate number of messages of the specified type in the chat 
        /// </summary>
        public static Task<Count> GetChatMessageCountAsync(this Client client,
            long chatId = default(long),
            SearchMessagesFilter filter = default(SearchMessagesFilter),
            bool returnLocal = default(bool))
        {
            return client.ExecuteAsync(new GetChatMessageCount
            {
                ChatId = chatId,
                Filter = filter,
                ReturnLocal = returnLocal,
            });
        }
    }
}