using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Searches for a specified query in the first name, last name and username of the members of a specified chat. Requires administrator rights in channels 
        /// </summary>
        public class SearchChatMembers : Function<ChatMembers>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "searchChatMembers";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Chat identifier 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Query to search for 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("query")]
            public string Query { get; set; }

            /// <summary>
            /// The maximum number of users to be returned 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }

            /// <summary>
            /// The type of users to return. By default, chatMembersFilterMembers
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("filter")]
            public ChatMembersFilter Filter { get; set; }
        }


        /// <summary>
        /// Searches for a specified query in the first name, last name and username of the members of a specified chat. Requires administrator rights in channels 
        /// </summary>
        public static Task<ChatMembers> SearchChatMembersAsync(this Client client,
            long chatId = default(long),
            string query = default(string),
            int limit = default(int),
            ChatMembersFilter filter = default(ChatMembersFilter))
        {
            return client.ExecuteAsync(new SearchChatMembers
            {
                ChatId = chatId,
                Query = query,
                Limit = limit,
                Filter = filter,
            });
        }
    }
}