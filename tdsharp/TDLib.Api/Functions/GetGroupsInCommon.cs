using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns a list of common group chats with a given user. Chats are sorted by their type and creation date 
        /// </summary>
        public class GetGroupsInCommon : Function<Chats>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getGroupsInCommon";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// User identifier 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("user_id")]
            public int UserId { get; set; }

            /// <summary>
            /// Chat identifier starting from which to return chats; use 0 for the first request 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset_chat_id")]
            public long OffsetChatId { get; set; }

            /// <summary>
            /// The maximum number of chats to be returned; up to 100
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }
        }


        /// <summary>
        /// Returns a list of common group chats with a given user. Chats are sorted by their type and creation date 
        /// </summary>
        public static Task<Chats> GetGroupsInCommonAsync(this Client client,
            int userId = default(int),
            long offsetChatId = default(long),
            int limit = default(int))
        {
            return client.ExecuteAsync(new GetGroupsInCommon
            {
                UserId = userId,
                OffsetChatId = offsetChatId,
                Limit = limit,
            });
        }
    }
}