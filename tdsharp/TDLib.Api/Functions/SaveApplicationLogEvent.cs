using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Saves application log event on the server. Can be called before authorization 
        /// </summary>
        public class SaveApplicationLogEvent : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "saveApplicationLogEvent";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Event type 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("type")]
            public string Type { get; set; }

            /// <summary>
            /// Optional chat identifier, associated with the event 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// The log event data
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("data")]
            public JsonValue Data { get; set; }
        }


        /// <summary>
        /// Saves application log event on the server. Can be called before authorization 
        /// </summary>
        public static Task<Ok> SaveApplicationLogEventAsync(this Client client,
            string type = default(string),
            long chatId = default(long),
            JsonValue data = default(JsonValue))
        {
            return client.ExecuteAsync(new SaveApplicationLogEvent
            {
                Type = type,
                ChatId = chatId,
                Data = data,
            });
        }
    }
}