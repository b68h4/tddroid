using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns an ordered list of chats in a chat list. Chats are sorted by the pair (order, chat_id) in decreasing order. (For example, to get a list of chats from the beginning, the offset_order should be equal to a biggest signed 64-bit number 9223372036854775807 == 2^63 - 1).
        /// </summary>
        public class GetChats : Function<Chats>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getChats";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The chat list in which to return chats
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_list")]
            public ChatList ChatList { get; set; }

            /// <summary>
            /// Chat order to return chats from 
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("offset_order")]
            public Int64 OffsetOrder { get; set; }

            /// <summary>
            /// Chat identifier to return chats from
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset_chat_id")]
            public long OffsetChatId { get; set; }

            /// <summary>
            /// The maximum number of chats to be returned. It is possible that fewer chats than the limit are returned even if the end of the list is not reached
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }
        }


        /// <summary>
        /// Returns an ordered list of chats in a chat list. Chats are sorted by the pair (order, chat_id) in decreasing order. (For example, to get a list of chats from the beginning, the offset_order should be equal to a biggest signed 64-bit number 9223372036854775807 == 2^63 - 1).
        /// </summary>
        public static Task<Chats> GetChatsAsync(this Client client,
            ChatList chatList = default(ChatList),
            Int64 offsetOrder = default(Int64),
            long offsetChatId = default(long),
            int limit = default(int))
        {
            return client.ExecuteAsync(new GetChats
            {
                ChatList = chatList,
                OffsetOrder = offsetOrder,
                OffsetChatId = offsetChatId,
                Limit = limit,
            });
        }
    }
}