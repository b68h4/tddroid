using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns information about members or banned users in a supergroup or channel. Can be used only if SupergroupFullInfo.can_get_members == true; additionally, administrator privileges may be required for some filters 
        /// </summary>
        public class GetSupergroupMembers : Function<ChatMembers>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getSupergroupMembers";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the supergroup or channel
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("supergroup_id")]
            public int SupergroupId { get; set; }

            /// <summary>
            /// The type of users to return. By default, supergroupMembersRecent 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("filter")]
            public SupergroupMembersFilter Filter { get; set; }

            /// <summary>
            /// Number of users to skip 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset")]
            public int Offset { get; set; }

            /// <summary>
            /// The maximum number of users be returned; up to 200
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }
        }


        /// <summary>
        /// Returns information about members or banned users in a supergroup or channel. Can be used only if SupergroupFullInfo.can_get_members == true; additionally, administrator privileges may be required for some filters 
        /// </summary>
        public static Task<ChatMembers> GetSupergroupMembersAsync(this Client client,
            int supergroupId = default(int),
            SupergroupMembersFilter filter = default(SupergroupMembersFilter),
            int offset = default(int),
            int limit = default(int))
        {
            return client.ExecuteAsync(new GetSupergroupMembers
            {
                SupergroupId = supergroupId,
                Filter = filter,
                Offset = offset,
                Limit = limit,
            });
        }
    }
}