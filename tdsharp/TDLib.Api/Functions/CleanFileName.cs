using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Removes potentially dangerous characters from the name of a file. The encoding of the file name is supposed to be UTF-8. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously 
        /// </summary>
        public class CleanFileName : Function<Text>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "cleanFileName";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// File name or path to the file
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("file_name")]
            public string FileName { get; set; }
        }


        /// <summary>
        /// Removes potentially dangerous characters from the name of a file. The encoding of the file name is supposed to be UTF-8. Returns an empty string on failure. This is an offline method. Can be called before authorization. Can be called synchronously 
        /// </summary>
        public static Task<Text> CleanFileNameAsync(this Client client,
            string fileName = default(string))
        {
            return client.ExecuteAsync(new CleanFileName
            {
                FileName = fileName,
            });
        }
    }
}