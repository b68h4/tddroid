using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns strings from a language pack in the current localization target by their keys. Can be called before authorization 
        /// </summary>
        public class GetLanguagePackStrings : Function<LanguagePackStrings>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getLanguagePackStrings";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Language pack identifier of the strings to be returned 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("language_pack_id")]
            public string LanguagePackId { get; set; }

            /// <summary>
            /// Language pack keys of the strings to be returned; leave empty to request all available strings
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("keys")]
            public string[] Keys { get; set; }
        }


        /// <summary>
        /// Returns strings from a language pack in the current localization target by their keys. Can be called before authorization 
        /// </summary>
        public static Task<LanguagePackStrings> GetLanguagePackStringsAsync(this Client client,
            string languagePackId = default(string),
            string[] keys = default(string[]))
        {
            return client.ExecuteAsync(new GetLanguagePackStrings
            {
                LanguagePackId = languagePackId,
                Keys = keys,
            });
        }
    }
}