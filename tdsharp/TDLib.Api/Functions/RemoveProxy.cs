using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Removes a proxy server. Can be called before authorization 
        /// </summary>
        public class RemoveProxy : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "removeProxy";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Proxy identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("proxy_id")]
            public int ProxyId { get; set; }
        }


        /// <summary>
        /// Removes a proxy server. Can be called before authorization 
        /// </summary>
        public static Task<Ok> RemoveProxyAsync(this Client client,
            int proxyId = default(int))
        {
            return client.ExecuteAsync(new RemoveProxy
            {
                ProxyId = proxyId,
            });
        }
    }
}