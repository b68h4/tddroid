using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Deletes all information about a language pack in the current localization target. The language pack which is currently in use (including base language pack) or is being synchronized can't be deleted. Can be called before authorization 
        /// </summary>
        public class DeleteLanguagePack : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "deleteLanguagePack";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the language pack to delete
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("language_pack_id")]
            public string LanguagePackId { get; set; }
        }


        /// <summary>
        /// Deletes all information about a language pack in the current localization target. The language pack which is currently in use (including base language pack) or is being synchronized can't be deleted. Can be called before authorization 
        /// </summary>
        public static Task<Ok> DeleteLanguagePackAsync(this Client client,
            string languagePackId = default(string))
        {
            return client.ExecuteAsync(new DeleteLanguagePack
            {
                LanguagePackId = languagePackId,
            });
        }
    }
}