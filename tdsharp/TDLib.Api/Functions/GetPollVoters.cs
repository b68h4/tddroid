using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns users voted for the specified option in a non-anonymous polls. For the optimal performance the number of returned users is chosen by the library
        /// </summary>
        public class GetPollVoters : Function<Users>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getPollVoters";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the chat to which the poll belongs 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifier of the message containing the poll
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// 0-based identifier of the answer option
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("option_id")]
            public int OptionId { get; set; }

            /// <summary>
            /// Number of users to skip in the result; must be non-negative
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset")]
            public int Offset { get; set; }

            /// <summary>
            /// The maximum number of users to be returned; must be positive and can't be greater than 50. Fewer users may be returned than specified by the limit, even if the end of the voter list has not been reached
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }
        }


        /// <summary>
        /// Returns users voted for the specified option in a non-anonymous polls. For the optimal performance the number of returned users is chosen by the library
        /// </summary>
        public static Task<Users> GetPollVotersAsync(this Client client,
            long chatId = default(long),
            long messageId = default(long),
            int optionId = default(int),
            int offset = default(int),
            int limit = default(int))
        {
            return client.ExecuteAsync(new GetPollVoters
            {
                ChatId = chatId,
                MessageId = messageId,
                OptionId = optionId,
                Offset = offset,
                Limit = limit,
            });
        }
    }
}