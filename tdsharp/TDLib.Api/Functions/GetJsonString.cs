using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Converts a JsonValue object to corresponding JSON-serialized string. This is an offline method. Can be called before authorization. Can be called synchronously 
        /// </summary>
        public class GetJsonString : Function<Text>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getJsonString";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The JsonValue object
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("json_value")]
            public JsonValue JsonValue { get; set; }
        }


        /// <summary>
        /// Converts a JsonValue object to corresponding JSON-serialized string. This is an offline method. Can be called before authorization. Can be called synchronously 
        /// </summary>
        public static Task<Text> GetJsonStringAsync(this Client client,
            JsonValue jsonValue = default(JsonValue))
        {
            return client.ExecuteAsync(new GetJsonString
            {
                JsonValue = jsonValue,
            });
        }
    }
}