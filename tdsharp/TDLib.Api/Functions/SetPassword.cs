using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Changes the password for the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed
        /// </summary>
        public class SetPassword : Function<PasswordState>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "setPassword";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Previous password of the user 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("old_password")]
            public string OldPassword { get; set; }

            /// <summary>
            /// New password of the user; may be empty to remove the password 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("new_password")]
            public string NewPassword { get; set; }

            /// <summary>
            /// New password hint; may be empty 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("new_hint")]
            public string NewHint { get; set; }

            /// <summary>
            /// Pass true if the recovery email address should be changed 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("set_recovery_email_address")]
            public bool SetRecoveryEmailAddress { get; set; }

            /// <summary>
            /// New recovery email address; may be empty
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("new_recovery_email_address")]
            public string NewRecoveryEmailAddress { get; set; }
        }


        /// <summary>
        /// Changes the password for the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed
        /// </summary>
        public static Task<PasswordState> SetPasswordAsync(this Client client,
            string oldPassword = default(string),
            string newPassword = default(string),
            string newHint = default(string),
            bool setRecoveryEmailAddress = default(bool),
            string newRecoveryEmailAddress = default(string))
        {
            return client.ExecuteAsync(new SetPassword
            {
                OldPassword = oldPassword,
                NewPassword = newPassword,
                NewHint = newHint,
                SetRecoveryEmailAddress = setRecoveryEmailAddress,
                NewRecoveryEmailAddress = newRecoveryEmailAddress,
            });
        }
    }
}