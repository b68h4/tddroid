using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Removes a group of active notifications. Needs to be called only if the notification group is removed by the current user 
        /// </summary>
        public class RemoveNotificationGroup : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "removeNotificationGroup";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Notification group identifier 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("notification_group_id")]
            public int NotificationGroupId { get; set; }

            /// <summary>
            /// The maximum identifier of removed notifications
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("max_notification_id")]
            public int MaxNotificationId { get; set; }
        }


        /// <summary>
        /// Removes a group of active notifications. Needs to be called only if the notification group is removed by the current user 
        /// </summary>
        public static Task<Ok> RemoveNotificationGroupAsync(this Client client,
            int notificationGroupId = default(int),
            int maxNotificationId = default(int))
        {
            return client.ExecuteAsync(new RemoveNotificationGroup
            {
                NotificationGroupId = notificationGroupId,
                MaxNotificationId = maxNotificationId,
            });
        }
    }
}