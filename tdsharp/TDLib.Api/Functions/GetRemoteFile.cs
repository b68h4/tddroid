using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns information about a file by its remote ID; this is an offline request. Can be used to register a URL as a file for further uploading, or sending as a message. Even the request succeeds, the file can be used only if it is still accessible to the user.
        /// </summary>
        public class GetRemoteFile : Function<File>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getRemoteFile";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Remote identifier of the file to get 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("remote_file_id")]
            public string RemoteFileId { get; set; }

            /// <summary>
            /// File type, if known
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("file_type")]
            public FileType FileType { get; set; }
        }


        /// <summary>
        /// Returns information about a file by its remote ID; this is an offline request. Can be used to register a URL as a file for further uploading, or sending as a message. Even the request succeeds, the file can be used only if it is still accessible to the user.
        /// </summary>
        public static Task<File> GetRemoteFileAsync(this Client client,
            string remoteFileId = default(string),
            FileType fileType = default(FileType))
        {
            return client.ExecuteAsync(new GetRemoteFile
            {
                RemoteFileId = remoteFileId,
                FileType = fileType,
            });
        }
    }
}