using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Sends a message. Returns the sent message
        /// </summary>
        public class SendMessage : Function<Message>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "sendMessage";

            /// <summary>
            /// Extra data attached to the message
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Target chat 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifier of the message to reply to or 0
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reply_to_message_id")]
            public long ReplyToMessageId { get; set; }

            /// <summary>
            /// Options to be used to send the message
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("options")]
            public SendMessageOptions Options { get; set; }

            /// <summary>
            /// Markup for replying to the message; for bots only 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reply_markup")]
            public ReplyMarkup ReplyMarkup { get; set; }

            /// <summary>
            /// The content of the message to be sent
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("input_message_content")]
            public InputMessageContent InputMessageContent { get; set; }
        }


        /// <summary>
        /// Sends a message. Returns the sent message
        /// </summary>
        public static Task<Message> SendMessageAsync(this Client client,
            long chatId = default(long),
            long replyToMessageId = default(long),
            SendMessageOptions options = default(SendMessageOptions),
            ReplyMarkup replyMarkup = default(ReplyMarkup),
            InputMessageContent inputMessageContent = default(InputMessageContent))
        {
            return client.ExecuteAsync(new SendMessage
            {
                ChatId = chatId,
                ReplyToMessageId = replyToMessageId,
                Options = options,
                ReplyMarkup = replyMarkup,
                InputMessageContent = inputMessageContent,
            });
        }
    }
}